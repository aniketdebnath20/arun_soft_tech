import mysql from "mysql2/promise";

const db = await mysql.createConnection({
  host: "localhost",
  user: "root", // <-- no space here
  password: "aniket2005",
  database: "contact_form",
});

const [data] = await db.execute(
  `INSERT INTO contact (name, email, phone, message, service)
   VALUES (?, ?, ?, ?, ?)`,
  [
    'Aniket Debnath',
    'aniket@example.com',
    '1246879832',
    'Hello, I am interested in your service in web developer.',
    'Web Development'
  ]
);

console.log("Row inserted:", data);


// insert the data

// const contactAction = async ({ data }) => {
//     const { service, email, phoneNumber, message, firstName } = data
//     const data = await db.excute(`insert into contact_form (firstName,email,services,phoneNumber,message) values (?)`, [firstName, email, phoneNumber, service, message]);

//     console.log("data success", data);

// }

/////



// direct function call 

const form = async (req: any) => {

  try {
    const { firstname, lastname, email, phonenumber, service } = await req.json();

    // ✅ Insert into MySQL
    await pool.query(
      'INSERT INTO contact_form (firstname, lastname, email, phonenumber, service) VALUES (?, ?, ?, ?, ?)',
      [firstname, lastname, email, phonenumber, service]
    )

    //excel form data enter     // Replace this with your Google Apps Script URL
    const GOOGLE_SHEET_WEBHOOK =
      "https://script.google.com/macros/s/XXXXXXXXXXXX/exec";

    const res = await fetch(GOOGLE_SHEET_WEBHOOK, {
      method: "POST",
      mode: "no-cors", // Required for Google Apps Script
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(form),
    });



  } catch (error) {
    console.log(error)
  }

}


/// excel daatt sacvave function or api 

























/////
// app/api/subscribe/route.js
import { db } from '@/lib/db';
import { error } from "console";

export async function POST(req) {
  try {
    const { email } = await req.json();

    if (!email || !email.includes('@')) {
      return new Response(JSON.stringify({ error: 'Invalid email' }), { status: 400 });
    }

    // Insert into MySQL
    await db.query(
      'INSERT INTO email_subscriptions (email) VALUES (?)',
      [email]
    );

    return new Response(JSON.stringify({ message: 'Subscribed successfully!' }), { status: 200 });
  } catch (error) {
    console.error(error);
    return new Response(JSON.stringify({ error: 'Something went wrong' }), { status: 500 });
  }
}


try {
  const res = await fetch('/api/subscribe', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ email }),
  });

  const data = await res.json();
  if (res.ok) {
    setMessage(' Subscribed successfully!');
    setEmail('');
  } else {
    setMessage(` ${data.error}`);
  }
} catch (err) {
  console.error(err);
  setMessage('Something went wrong.');
}


// google sheet code 
function doPost(e) {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var data = JSON.parse(e.postData.contents);

  sheet.appendRow([
    data.firstname,
    data.lastname,
    data.email,
    data.phoneNumber,
    data.service,
    data.countryCode,
    data.message,
    new Date()
  ]);

  return ContentService.createTextOutput(
    JSON.stringify({ result: "success" })
  ).setMimeType(ContentService.MimeType.JSON);
}






'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import {
  Menu,
  X,
  ChevronDown,
  Home,
  LayoutGrid,
  Info,
  Mail,
} from 'lucide-react';

import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTrigger,
  SheetClose,
  SheetTitle, // ✅ added
} from '@/components/ui/sheet';
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible';
import { motion, AnimatePresence } from 'framer-motion';
import Logo from '../logo';
import { ServicesMenu } from './services-menu';
import { servicesMenu } from '@/lib/data';

const navLinks = [
  { href: '/', label: 'Home', icon: Home },
  { href: '/services', label: 'Services', icon: LayoutGrid, collapsible: true },
  { href: '/about', label: 'About', icon: Info },
  { href: '/contact', label: 'Contact', icon: Mail },
];

export function Header() {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isServicesMenuOpen, setIsServicesMenuOpen] = useState(false);
  const [openCollapsible, setOpenCollapsible] = useState<string | null>(null);

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10);
    };
    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const handleCollapsibleToggle = (label: string) => {
    setOpenCollapsible(openCollapsible === label ? null : label);
  };

  return (
    <header
      className={cn(
        'fixed top-0 left-0 right-0 z-50 transition-all duration-300',
        isScrolled ? 'glassmorphism shadow-2xl' : 'bg-transparent'
      )}
      onMouseLeave={() => setIsServicesMenuOpen(false)}
    >
      <div className="container mx-auto flex h-20 items-center justify-between px-6">
        <div className="flex items-center">
          <Link href="/" className="flex items-center gap-3 group">
            <Logo />
          </Link>
        </div>

        {/* Desktop Navigation */}
        <nav className="hidden md:flex absolute left-1/2 -translate-x-1/2 items-center gap-2">
          {navLinks.map(link =>
            link.collapsible ? (
              <div
                key={link.href}
                className="relative"
                onMouseEnter={() => setIsServicesMenuOpen(true)}
              >
                <Link
                  href={link.href}
                  className={cn(
                    'relative px-4 py-2 text-muted-foreground transition-colors duration-300 hover:text-foreground flex items-center gap-1',
                    'after:absolute after:bottom-1 after:left-0 after:h-px after:w-full after:bg-primary after:scale-x-0 after:origin-center after:transition-transform after:duration-300 hover:after:scale-x-100'
                  )}
                >
                  {link.label}
                  <ChevronDown
                    className={cn(
                      'w-4 h-4 transition-transform duration-300',
                      isServicesMenuOpen ? 'rotate-180' : ''
                    )}
                  />
                </Link>
              </div>
            ) : (
              <Link
                key={link.href}
                href={link.href}
                className={cn(
                  'relative px-4 py-2 text-muted-foreground transition-colors duration-300 hover:text-foreground',
                  'after:absolute after:bottom-1 after:left-0 after:h-px after:w-full after:bg-primary after:scale-x-0 after:origin-center after:transition-transform after:duration-300 hover:after:scale-x-100'
                )}
                onMouseEnter={() => setIsServicesMenuOpen(false)}
              >
                {link.label}
              </Link>
            )
          )}
        </nav>

        {/* Mobile Navigation Trigger */}
        <div className="flex items-center md:hidden">
          <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>
            <SheetTrigger asChild>
              <Button variant="ghost" size="icon" className="md:hidden p-6 rounded-full text-foreground hover:bg-muted/50 hover:shadow-lg hover:shadow-primary/20 transition-all duration-200">
                {isMobileMenuOpen ? (
                  <X className="w-5 h-5 text-foreground" />
                ) : (
                  <Menu className="w-5 h-5 text-foreground" />
                )}
                <span className="sr-only">Open menu</span>
              </Button>
            </SheetTrigger>

            <SheetContent
              side="right"
              className="w-full max-w-sm p-0 flex flex-col bg-background shadow-2xl"
            >
              <SheetHeader className="p-4 flex flex-row items-center justify-between border-b">
                {/* ✅ Accessibility Fix: Hidden Title */}
                <SheetTitle className="sr-only">Mobile Menu</SheetTitle>

                <SheetClose asChild>
                  <Link href="/" className="w-full">
                    <Logo />
                  </Link>
                </SheetClose>
              </SheetHeader>

              <div className="flex-grow overflow-y-auto">
                <nav className="flex flex-col space-y-1 p-4 text-base font-medium">
                  {navLinks.map((link, index) =>
                    link.collapsible ? (
                      <Collapsible
                        key={`${link.href}-${index}`}
                        onOpenChange={() => handleCollapsibleToggle(link.label)}
                        open={openCollapsible === link.label}
                      >
                        <CollapsibleTrigger className="w-full">
                          <div
                            className={cn(
                              'flex items-center justify-between w-full rounded-md px-3 py-2 text-foreground transition-colors hover:bg-muted/50'
                            )}
                          >
                            <span className="flex items-center gap-3">
                              <link.icon className="w-5 h-5 text-muted-foreground" />
                              {link.label}
                            </span>
                            <ChevronDown
                              className={cn(
                                'w-5 h-5 transition-transform duration-300',
                                openCollapsible === link.label ? 'rotate-180' : ''
                              )}
                            />
                          </div>
                        </CollapsibleTrigger>
                        <CollapsibleContent>
                          <div className="pl-4 mt-1 space-y-1">
                            {servicesMenu.map(category =>
                              category.items.map((item, itemIndex) => (
                                <SheetClose asChild key={`${item.href}-${itemIndex}`}>
                                  <Link
                                    href={item.href}
                                    className="block transition-colors text-muted-foreground hover:text-foreground rounded-md px-3 py-2"
                                    onClick={() => setIsMobileMenuOpen(false)}
                                  >
                                    {item.title}
                                  </Link>
                                </SheetClose>
                              ))
                            )}
                          </div>
                        </CollapsibleContent>
                      </Collapsible>
                    ) : (
                      <SheetClose asChild key={`${link.href}-${index}`}>
                        <Link
                          href={link.href}
                          className="flex items-center gap-3 transition-colors text-foreground hover:bg-muted/50 rounded-md px-3 py-2"
                          onClick={() => setIsMobileMenuOpen(false)}
                        >
                          <link.icon className="w-5 h-5 text-muted-foreground" />
                          {link.label}
                        </Link>
                      </SheetClose>
                    )
                  )}
                </nav>
              </div>
            </SheetContent>
          </Sheet>
        </div>
      </div>

      {/* Services Mega Menu */}
      <AnimatePresence>
        {isServicesMenuOpen && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
            className="absolute top-full left-0 right-0"
            onMouseEnter={() => setIsServicesMenuOpen(true)}
          >
            <ServicesMenu />
          </motion.div>
        )}
      </AnimatePresence>
    </header>
  );
}
